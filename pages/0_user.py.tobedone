from pydantic import BaseModel
import streamlit as st
import os
# 
from deta import Deta
import time
import datetime

from detadb import settings as _settings
import os

# write credentials to env/env file (no quotes in value! for key = values)
try:
    #deta_key = os.environ.get('user_manager',_settings.settings.user_manager) # does not work, why???
    deta_key = st.secrets["user_manager"]
except:
    print('set Environment variable >>> user_manager <<< to access deta data base')  
#dbkey = st.secrets['db_credentials']

deta = Deta(deta_key)

udb = deta.Base("nutzer") #
import streamlit_authenticator as stauth

#hashed_passwords = stauth.Hasher(['abc', 'def']).generate()
#print(hashed_passwords)


class User(BaseModel):
    key: str # username
    email: str
    name: str
    password: str
    access: str|None=None
    admin: bool=False

    def create(**args):
        args['key']=args['username']
        del args['username']
        user=User(**args)        
        resp = udb.put(user)
        return resp

    def read(username):
        user = udb.get(username)        
        return user
    
    def update(**args):
        key=args[username]
        user = udb.get(key)
        user.update(**args)
        resp = udb.update(user)
        return resp
    
    def delete(username):
        udb.delete(username)



# for local usage
import yaml
from yaml.loader import SafeLoader
with open('./user.yaml') as file:
    config = yaml.load(file, Loader=SafeLoader)


authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days'],
    config['preauthorized']
)

name, authentication_status, username = authenticator.login('Login', 'main')
user = User()

if st.session_state["authentication_status"]:
    authenticator.logout('Logout', 'main')
    st.write(f'Welcome *{st.session_state["name"]}*')
    st.title('Some content')
elif st.session_state["authentication_status"] == False:
    st.error('Username/password is incorrect')
elif st.session_state["authentication_status"] == None:
    st.warning('Please enter your username and password')